<?php
namespace powerkernel\yiiproduct\models;

use powerkernel\yiicommon\behaviors\UTCDateTimeBehavior;
use powerkernel\yiiuser\models\User;
use powerkernel\yiiproduct\models\Category;
use powerkernel\yiilaundry\models\Cart;
use Yii;


/**
 * This is the model class for FAQ.
 *
 * @property \MongoDB\BSON\ObjectID $_id
 * @property string $name
 * @property string $description
 * @property string $short_description 
 * @property string $price
 * @property string $image_url
 * @property string $thumb_url
 * @property string $status
 * @property string $created_by
 * @property string $updated_by
 * @property \MongoDB\BSON\UTCDateTime $created_at
 * @property \MongoDB\BSON\UTCDateTime $updated_at
 */
class Product extends \yii\mongodb\ActiveRecord
{

    const STATUS_ACTIVE = 'STATUS_ACTIVE';
    const STATUS_INACTIVE = 'STATUS_INACTIVE';
    public $price_with_currency;
    public $category_name;
    public $selected_qty;

    public static function collectionName()
    {
        return 'product_db';
    }

    /**
     * @inheritdoc
     * @return array
     */
    public function attributes()
    {
        return [
            '_id',
            'name',
            'description',
            'short_description',
            'content_md',
            'content_html',
            'price',
            'image_url',
            'thumb_url',
            'status',
            'category_id',
            'created_by',
            'updated_by',
            'created_at',
            'updated_at'
        ];
    }
    
    public function fields()
    {
        $fields = parent::fields();
        $fields['price_with_currency']=function ($model) {
            return'$ '.number_format((float)$model->price,2);
        };
        $fields['category_name']=function ($model) {
           $Category = Category::find()->where(['_id'=>$model->category_id])->one();
           return !empty($Category)?$Category->name:"";
        };
        $fields['content_md']=function ($model) {
            return !empty($model->content_md)?$model->content_md:"";
        };
        $fields['selected_qty']=function ($model) {
            $selected_qty = "";
            $Cart = Cart::find()->where(['user_id'=>(string)Yii::$app->user->id])->asArray()->all();
            if(!empty($Cart)){
                foreach($Cart as $cart_item){
                    if(!empty($cart_item['cart_item'])){
                        foreach($cart_item['cart_item'] as $each){
                            if($each['product_id'] == (string) $this->_id){
                                $selected_qty = $each['product_qty'];
                            }
                        }       
                    }             
                }
            }
            return $selected_qty;
        };
        
        
        return $fields;
    }
  

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'content_md','content_html','description', 'short_description', 'price', 'image_url','thumb_url','category_id'], 'required'],
            [['price'], 'number'],

            [['description','content_html','content_md'], 'string'],

            [['image_url','thumb_url'],'url', 'defaultScheme' => 'http'],

            [['short_description'], 'string', 'max' => 100],

            [['status'], 'string', 'max' => 20],

            ['status', 'default', 'value' => self::STATUS_ACTIVE],

            [['category_id'], 'exist', 'targetClass' => Category::class, 'targetAttribute' => ['category_id' => '_id']],

            // [['created_by'], 'exist', 'targetClass' => User::class, 'targetAttribute' => ['created_by' => '_id']],

            // [['updated_by'], 'exist', 'targetClass' => User::class, 'targetAttribute' => ['updated_by' => '_id']],
        ];
    }

    public function behaviors()
    {
        return [
            UTCDateTimeBehavior::class,
        ];
    }

    public function beforeSave($insert)
    {
        if ($insert) {
            $this->created_by = (string)Yii::$app->user->id;

        }

        $this->updated_by = (string)Yii::$app->user->id;
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub

    }
}
