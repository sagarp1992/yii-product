<?php
/**
 * @author Harry Tang <harry@powerkernel.com>
 * @link https://powerkernel.com
 * @copyright Copyright (c) 2018 Power Kernel
 */

namespace powerkernel\yiiproduct\models;

use powerkernel\yiicommon\behaviors\UTCDateTimeBehavior;
use powerkernel\yiiuser\models\User;
use Yii;


/**
 * This is the model class for Category.
 *
 * @property \MongoDB\BSON\ObjectID $_id
 * @property string $name
 * @property string $description
 * @property string $short_description 
 * @property string $slug
 * @property string $status
 * @property string $created_by
 * @property string $updated_by
 * @property \MongoDB\BSON\UTCDateTime $created_at
 * @property \MongoDB\BSON\UTCDateTime $updated_at
 */
class Category extends \yii\mongodb\ActiveRecord
{

    const STATUS_ACTIVE = 'STATUS_ACTIVE';
    const STATUS_INACTIVE = 'STATUS_INACTIVE';
    
    public static function getStatusOption($e = null)
    {
        $option = [
            self::STATUS_ACTIVE => Yii::t('category', 'Active'),
            self::STATUS_INACTIVE => Yii::t('category', 'Inactive'),
        ];
        if (is_array($e))
            foreach ($e as $i)
                unset($option[$i]);
        return $option;
    }

    /**
     * get status text
     * @param null $status
     * @return string
     */
    public function getStatusText($status = null)
    {
        if ($status === null)
            $status = $this->status;
        switch ($status) {
            case self::STATUS_ACTIVE:
                return Yii::t('category', 'Active');
                break;
            case self::STATUS_INACTIVE:
                return Yii::t('category', 'Inactive');
                break;
            default:
                return Yii::t('category', 'Unknown');
                break;
        }
    }

    /**
     * @inheritdoc
     * @inheritdoc
     */
    public static function collectionName()
    {
        return 'category_db';
    }

    /**
     * @inheritdoc
     * @return array
     */
    public function attributes()
    {
        return [
            '_id',
            'name',
            'description',
            'image_url',
            'status',
            // 'created_by',
            // 'updated_by',
            'created_at',
            'updated_at'
        ];
    }

    /**
     * @inheritdoc
     */
    
    public function rules()
    {
        return [
            [['name','image_url'], 'required'],
            [['name'], 'unique'],
            ['image_url','url'],
            [['description'], 'string'],
            ['status', 'default', 'value' => self::STATUS_ACTIVE],
            [['status'], 'string', 'max' => 20],
            // [['created_by'], 'exist', 'targetClass' => User::class, 'targetAttribute' => ['created_by' => '_id']],
            // [['updated_by'], 'exist', 'targetClass' => User::class, 'targetAttribute' => ['updated_by' => '_id']],
        ];
    }
    public function behaviors()
    {
        return [
            UTCDateTimeBehavior::class,
        ];
    }
    /**
     * @inheritdoc
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        // if ($insert) {
        //     $this->created_by = (string)Yii::$app->user->id;
        // }
        // $this->updated_by = (string)Yii::$app->user->id;
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}
